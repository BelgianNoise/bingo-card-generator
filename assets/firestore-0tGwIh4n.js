import{U as v,M as i,A as a,f as r,N as n,V as E,z as c,J as g,L as f,W as y,X as p,Y as R,g as D}from"./index-vMAS2FgS.js";async function q(e){const s=sessionStorage.getItem("pw-exp-very-secure-"+e);if(s){if(parseInt(s)<new Date().getTime())return S(e),!1}else return!1;const t=sessionStorage.getItem("pw-very-secure-"+e);if(!t)return S(e),!1;const u=await U(e,t);return u||S(e),u}function G(e,s){sessionStorage.setItem("pw-very-secure-"+e,s);const t=new Date().getTime()+1e3*60*60*23*1;sessionStorage.setItem("pw-exp-very-secure-"+e,t.toString())}function S(e){sessionStorage.removeItem("pw-exp-very-secure-"+e),sessionStorage.removeItem("pw-very-secure-"+e)}const o=D();async function x(e,s){const t=await v(i(a,"games"),e);return s.gameId=t.id,await v(i(a,"passwords"),s),o.emit(r(n.SUCCESS,"Game created successfully")),t.id}async function N(e,s=!0){return e.updatedAt=new Date().getTime(),await E(c(a,"games",e.id),e),s&&o.emit(r(n.SUCCESS,"Game updated successfully")),e}async function A(e,s,t){const u=g(i(a,"passwords"),f("gameId","==",e),f("value","==",s)),d=await y(u);if(d.docs.length===0)return!1;const w=d.docs[0].data();return w.value=t,await E(c(a,"passwords",d.docs[0].id),w),G(e,t),o.emit(r(n.SUCCESS,"Password updated successfully")),await C(e),!0}async function P(e){try{await p(c(a,"games",e));const s=g(i(a,"passwords"),f("gameId","==",e)),t=await y(s);for(const l of t.docs.map(m=>m.id))await p(c(a,"passwords",l));S(e);const u=g(i(a,"entries"),f("gameId","==",e)),d=await y(u);for(const l of d.docs.map(m=>m.id))await p(c(a,"entries",l));const w=g(i(a,"cards"),f("gameId","==",e)),h=await y(w);for(const l of h.docs.map(m=>m.id))await p(c(a,"cards",l))}catch(s){return console.error("Error deleting game:",s),o.emit(r(n.ERROR,"Error deleting game")),!1}return o.emit(r(n.SUCCESS,"Game deleted successfully")),!0}async function U(e,s){const t=g(i(a,"passwords"),f("gameId","==",e)),d=(await y(t)).docs.map(w=>w.data());return d.length===0?(console.log("OH GOD! No password found for game:",e),o.emit(r(n.ERROR,"Error validating password")),!1):d[0].value===s}async function T(e){const s=await v(i(a,"entries"),e);return o.emit(r(n.SUCCESS,"Entry was successfully added :)")),{...e,id:s.id}}async function b(e){try{e.updatedAt=new Date().getTime();const s=c(i(a,"entries"),e.id);return await E(s,e),await C(e.gameId),o.emit(r(n.SUCCESS,"Changed successfully :)",2e3)),e}catch(s){return console.error("Error saving entry:",s),o.emit(r(n.ERROR,"Error saving entry")),e}}async function k(e){try{const s=c(i(a,"entries"),e.id);return await p(s),await C(e.gameId),o.emit(r(n.SUCCESS,"Entry was successfully deleted :)")),!0}catch{return o.emit(r(n.ERROR,"Error deleting entry my man :/")),!1}}async function C(e){const s=c(i(a,"games"),e),t=await R(s);if(!t.exists()){o.emit(r(n.WARNING,"Something went wrong syncing to the server :("));return}await N({...t.data(),id:e},!1)}export{A as a,N as b,q as c,P as d,b as e,k as f,T as g,x as h,G as s,U as v};
